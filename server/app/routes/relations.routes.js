const controller = require('../controllers/relations.controller')
const { authJwt, verifyRel } = require('../middleware')

/**
 * @swagger
 *tags:
 *  name: Relations
 *  description: API to manage camera and use cases relations.
 */
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header('Access-Control-Allow-Headers', 'x-access-token, Origin, Content-Type, Accept')
    next()
  })

    /**
   * @swagger
   * /api/relations/cam/{id}:
   *   get:
   *    tags:
   *       - Relations
   *    summary: "Camera Relations"
   *    operationId: getRels
   *    description: "Use to get all use cases assgnied to camera"
   *    parameters:
   *      - in: path
   *        name: id
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: object
   *                 properties:
   *                   name:
   *                     description: "Algorithm ID"
   *                     type: string
   *                     example: 10
   *                   id:
   *                     description: "Id of the camera"
   *                     type: string
   *                     example: 2da2b89d-57a5-4f87-8e54-1809793c3945
   *                   createdAt:
   *                     description: "Date when this camera was created."
   *                     type: date
   *                     example: 2021-02-02T16:17:56.000Z
   *                   updatedAt:
   *                     description: "Date when this camera has been updated."
   *                     type: date
   *                     example: 2021-02-02T16:17:56.000Z
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.get(
    '/api/relations/cam/:id',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.getRels
  )

  app.get(
    '/api/relations/dashboards',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.dashboards
  )

  app.get('/api/relations/all', [authJwt.verifyToken], controller.getAll)

  app.post(
    '/api/relations/create',
    [authJwt.verifyToken, authJwt.isClientOrBranch, verifyRel.numRels],
    controller.createRel
  )

  app.delete(
    '/api/relations/del/:id',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.deleteRel
  )

  app.put(
    '/api/relations/edit/:id',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.editRel
  )

  app.post(
    '/api/camConf/:id',
    [authJwt.verifyToken, authJwt.isClientOrBranch, verifyRel.numRels],
    controller.configs
  )

  app.post(
    '/api/roiConf/:id',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.configsRoi
  )

  app.get('/api/relations/check/:id/:cam', [authJwt.verifyToken], controller.checkVideo)
}
