const { authJwt, verifySignUp } = require('../middleware')
const controller = require('../controllers/user.controller')

module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header('Access-Control-Allow-Headers', 'x-access-token, Origin, Content-Type, Accept')
    next()
  })
  /**
   * @swagger
   *tags:
   *  name: Users
   *  description: API to manage the users.
   */

  app.get(
    '/api/users/remaining',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.remaining
  )

  app.get('/api/users/getOneAd/:uuid', [authJwt.verifyToken, authJwt.isAdmin], controller.viewOneAd)

  /**
   * @swagger
   * /api/users/getOne/{uuid}:
   *   get:
   *    tags:
   *       - Users
   *    summary: "User details"
   *    operationId: userOne
   *    description: "Use to get details of a user"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: object
   *                 properties:
   *                   username:
   *                     description: "Username of the user"
   *                     type: string
   *                     example: test
   *                   email:
   *                     description: "Email of the user"
   *                     type: string
   *                     example: test@graymatics.com
   *                   id_account:
   *                     description: "Account ID of the user to which it belongs"
   *                     type: string
   *                     example: test123
   *                   id_branch:
   *                     description: "Branch ID of the user to which it belongs"
   *                     type: string
   *                     example: test123
   *                   role:
   *                     description: "Specified role of the user"
   *                     type: string
   *                     example: user
   *                   id:
   *                     description: "ID of the user"
   *                     type: string
   *                     example: test123
   *                   updatedAt:
   *                     description: "Date when this camera has been updated."
   *                     type: date
   *                     example: 2021-02-02T16:17:56.000Z
   *                   disabled:
   *                     description: "User status"
   *                     type: number
   *                     example: 0
   *                   vms:
   *                     description: "VMS"
   *                     type: string
   *                     example: Pelco
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.get(
    '/api/users/getOne/:uuid',
    [authJwt.verifyToken, authJwt.isClientOrBranchOrAdmin],
    controller.viewOne
  )

  /**
   * @swagger
   * /api/users/client:
   *   get:
   *    tags:
   *       - Users
   *    summary: "Client details"
   *    operationId: clientDetails
   *    description: "Use to get all branches under client"
   *    parameters:
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     username:
   *                       type: string
   *                       description: "Username of the user"
   *                       example: test
   *                     email:
   *                       description: "Email of the user"
   *                       type: string
   *                       example: test@graymatics.com
   *                     id_account:
   *                       description: "Account ID of the user to which it belongs"
   *                       type: string
   *                       example: test123
   *                     id_branch:
   *                       description: "Branch ID of the user to which it belongs"
   *                       type: string
   *                       example: test123
   *                     role:
   *                       description: "Specified role of the user"
   *                       type: string
   *                       example: branch
   *                     id:
   *                       description: "ID of the user"
   *                       type: string
   *                       example: test123
   *                     updatedAt:
   *                       description: "Date when this camera has been updated."
   *                       type: date
   *                       example: 2021-02-02T16:17:56.000Z
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.get('/api/users/client', [authJwt.verifyToken, authJwt.isClient], controller.viewClientUnder)

  /**
   * @swagger
   * /api/users/branch:
   *   get:
   *    tags:
   *       - Users
   *    summary: "Branch details"
   *    operationId: branchDetails
   *    description: "Use to get all users in branch"
   *    parameters:
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     username:
   *                       type: string
   *                       description: "Username of the user"
   *                       example: test
   *                     email:
   *                       description: "Email of the user"
   *                       type: string
   *                       example: test@graymatics.com
   *                     id_account:
   *                       description: "Account ID of the user to which it belongs"
   *                       type: string
   *                       example: test123
   *                     id_branch:
   *                       description: "Branch ID of the user to which it belongs"
   *                       type: string
   *                       example: test123
   *                     role:
   *                       description: "Specified role of the user"
   *                       type: string
   *                       example: user
   *                     id:
   *                       description: "ID of the user"
   *                       type: string
   *                       example: test123
   *                     updatedAt:
   *                       description: "Date when this camera has been updated."
   *                       type: date
   *                       example: 2021-02-02T16:17:56.000Z
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.get(
    '/api/users/branch',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.viewBranchUnder
  )

  /**
   * @swagger
   * /api/users/admin:
   *   get:
   *    tags:
   *       - Users
   *    summary: "Admin details"
   *    operationId: adminDetails
   *    description: "Use to get all admins or users under admin"
   *    parameters:
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     username:
   *                       type: string
   *                       description: "Username of the user"
   *                       example: test
   *                     email:
   *                       description: "Email of the user"
   *                       type: string
   *                       example: test@graymatics.com
   *                     id_account:
   *                       description: "Account ID of the user to which it belongs"
   *                       type: string
   *                       example: test123
   *                     id_branch:
   *                       description: "Branch ID of the user to which it belongs"
   *                       type: string
   *                       example: test123
   *                     role:
   *                       description: "Specified role of the user"
   *                       type: string
   *                       example: admin
   *                     id:
   *                       description: "ID of the user"
   *                       type: string
   *                       example: test123
   *                     updatedAt:
   *                       description: "Date when this camera has been updated."
   *                       type: date
   *                       example: 2021-02-02T16:17:56.000Z
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.get('/api/users/admin', [authJwt.verifyToken, authJwt.isAdmin], controller.viewAdminUnder)

  /**
   * @swagger
   * /api/edit/branch/{uuid}:
   *   put:
   *    tags:
   *       - Users
   *    summary: "Edit branch details"
   *    operationId: editBranchDetails
   *    description: "Use to edit branch details"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.put(
    '/api/edit/branch/:uuid',
    [authJwt.verifyToken, authJwt.isClient, verifySignUp.checkDuplicateUsernameOrEmailEdit],
    controller.editBranch
  )

  /**
   * @swagger
   * /api/edit/user/{uuid}:
   *   put:
   *    tags:
   *       - Users
   *    summary: "Edit user details"
   *    operationId: editUserDetails
   *    description: "Use to edit user details"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.put(
    '/api/edit/user/:uuid',
    [authJwt.verifyToken, authJwt.isClientOrBranch, verifySignUp.checkDuplicateUsernameOrEmailEdit],
    controller.editUser
  )

  /**
   * @swagger
   * /api/edit/client/{uuid}:
   *   put:
   *    tags:
   *       - Users
   *    summary: "Edit client details"
   *    operationId: editClientDetails
   *    description: "Use to edit client details"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.put(
    '/api/edit/client/:uuid',
    [authJwt.verifyToken, authJwt.isAdmin, verifySignUp.checkDuplicateUsernameOrEmailEdit],
    controller.editClient
  )

  /**
   * @swagger
   * /api/edit/admin/{uuid}:
   *   put:
   *    tags:
   *       - Users
   *    summary: "Edit admin details"
   *    operationId: editAdminDetails
   *    description: "Use to edit branch details"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               data:
   *                 type: array
   *                 items:
   *                   type: object
   *                   properties:
   *                     disabled:
   *                       description: "User status"
   *                       type: number
   *                       example: 0
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.put(
    '/api/edit/admin/{uuid}',
    [authJwt.verifyToken, authJwt.isAdmin, verifySignUp.checkDuplicateUsernameOrEmailEdit],
    controller.editAdmin
  )

  /**
   * @swagger
   * /api/delete/user/:uuid:
   *   delete:
   *    tags:
   *       - Users
   *    summary: "Delete a user"
   *    operationId: deleteUser
   *    description: "Use to delete a user"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               user:
   *                 description: "User's uuid"
   *                 type: string
   *                 example: test123
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.delete(
    '/api/delete/user/{uuid}',
    [authJwt.verifyToken, authJwt.isClientOrBranch],
    controller.deleteUser
  )

  /**
   * @swagger
   * /api/delete/branch/:uuid:
   *   delete:
   *    tags:
   *       - Users
   *    summary: "Delete a branch"
   *    operationId: deleteBranch
   *    description: "Use to delete a branch"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               branch:
   *                 description: "Branch's id"
   *                 type: string
   *                 example: test123
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.delete(
    '/api/delete/branch/{uuid}',
    [authJwt.verifyToken, authJwt.isClient],
    controller.deleteBranch
  )

  /**
   * @swagger
   * /api/delete/client/:uuid:
   *   delete:
   *    tags:
   *       - Users
   *    summary: "Delete a client"
   *    operationId: deleteClient
   *    description: "Use to delete a client"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   disabled:
   *                     description: "User status"
   *                     type: boolean
   *                     example: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               client:
   *                 description: "Client's id"
   *                 type: string
   *                 example: test123
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.delete(
    '/api/delete/client/{uuid}',
    [authJwt.verifyToken, authJwt.isAdmin],
    controller.deleteClient
  )

  /**
   * @swagger
   * /api/delete/admin/:uuid:
   *   delete:
   *    tags:
   *       - Users
   *    summary: "Delete an admin"
   *    operationId: deleteAdmin
   *    description: "Use to delete an admin"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               user:
   *                 description: "User's id"
   *                 type: string
   *                 example: test123
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.delete(
    '/api/delete/admin/:uuid',
    [authJwt.verifyToken, authJwt.isAdmin],
    controller.deleteAdmin
  )

  /**
   * @swagger
   * /api/changeP/{uuid}:
   *   put:
   *    tags:
   *       - Users
   *    summary: "Change password"
   *    operationId: changePass
   *    description: "Change password of a user"
   *    parameters:
   *      - in: path
   *        name: uuid
   *        schema:
   *          type: string
   *        required: true
   *      - in: header
   *        name: x-access-token
   *        schema:
   *          type: string
   *        required: true
   *    requestBody:
   *       content:
   *          application/json:
   *            schema:
   *              type: object
   *              properties:
   *                   password:
   *                     description: "New password"
   *                     type: string
   *                     example: new_strong_password@123
   *    responses:
   *      '200':
   *        description: "A successful response"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: true
   *               id:
   *                 description: "User's uid"
   *                 type: string
   *                 example: test123
   *      '500':
   *        description: "Server error"
   *        content:
   *          application/json:
   *            schema:
   *             type: object
   *             properties:
   *               success:
   *                 description: "Result type"
   *                 type: boolean
   *                 example: false
   *               message:
   *                 description: "Type of failure"
   *                 type: string
   *                 example: Error message generated by the server
   */
  app.put(
    '/api/changeP/:uuid',
    [authJwt.verifyToken, authJwt.isClientOrBranchOrAdmin],
    controller.changePass
  )
}
